{"version":3,"sources":["constants.js","serviceWorker.js","reducers/user.js","reducers/notifications.js","reducers/index.js","actions/actions.js","components/notification/notification.js","App.js","components/home/home.js","components/login/login.js","index.js","Store.js"],"names":["module","exports","REGISTER","NEW_USER","EXISTING_USER","GET_USER_DATA","SET_USER_DATA","SUCCESS","ERROR","RESET","LOGOUT","GET_TOKEN","AUTH_TYPE","NORMAL","OAUTH","Boolean","window","location","hostname","match","INITIAL_STATE","user","isRegistered","token","response","error","rootReducer","combineReducers","state","arguments","length","undefined","payload","type","console","log","Object","objectSpread","data","sessionStorage","getItem","JSON","parse","notifications","verify","dispatch","axios","post","concat","then","catch","err","status","alertError","setTimeout","reset","login","withCredentials","register","alertSuccess","getUserData","get","logout","getToken","Notification","this","props","react_default","a","createElement","className","msg","Component","connect","action","bindActionCreators","Actions","App","react_router","to","pathname","notification_notification","Home","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","history","push","_this2","style","textAlign","name","email","onClick","Login","emailRe","RegExp","passRe","username","mobileNumber","password","otp","rememberMe","oAuthToken","ev","preventDefault","setState","test","authType","_this3","passOrPin","Fragment","placeholder","required","onChange","target","value","id","checked","htmlFor","min","max","onSubmit","onFormSubmit","StoreInstance","createStore","applyMiddleware","thunk","routing","es","store","react_router_dom","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa4513ba.chunk.js","sourcesContent":["module.exports = {\n    REGISTER: \"REGISTER\",\n    NEW_USER: \"NEW_USER\",\n    EXISTING_USER: \"EXISTING_USER\",\n    GET_USER_DATA: \"GET_USER_DATA\",\n    SET_USER_DATA: \"SET_USER_DATA\",\n    SUCCESS: \"SUCCESS\",\n    ERROR: \"ERROR\",\n    RESET: \"RESET\",\n    LOGOUT: \"LOGOUT\",\n    GET_TOKEN: \"GET_TOKEN\",\n    AUTH_TYPE: {\n        NORMAL: \"NORMAL\",\n        OAUTH: \"OAUTH\"\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REGISTER, NEW_USER, EXISTING_USER, GET_USER_DATA, SET_USER_DATA, LOGOUT, GET_TOKEN } from \"./../constants\";\r\n\r\nconst INITIAL_STATE = {\r\n    user: null,\r\n    isRegistered: null,\r\n    token: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, payload) => {\r\n    switch (payload.type) {\r\n        case REGISTER:\r\n            return {\r\n                user: payload.user\r\n            };\r\n\r\n        case GET_USER_DATA:\r\n            console.log(payload)\r\n            return {\r\n                ...state,\r\n                user: payload.user\r\n            };\r\n\r\n        case GET_TOKEN:\r\n                const data = sessionStorage.getItem(\"user\");\r\n                const token = (data === null) ? null : JSON.parse(data).token;\r\n                return {\r\n                    ...state,\r\n                    token: token\r\n                };\r\n\r\n        case SET_USER_DATA:\r\n            console.log(SET_USER_DATA, payload.user);\r\n            // sessionStorage.setItem(\"user\", JSON.stringify(payload.user));\r\n            return {\r\n                ...state,\r\n                token: payload.user.token,\r\n            };\r\n\r\n        case LOGOUT:\r\n            // sessionStorage.removeItem(\"user\");\r\n            return {\r\n                user: null,\r\n                isRegistered: null,\r\n                token: null\r\n            };\r\n\r\n        case NEW_USER:\r\n            console.log(NEW_USER, payload);\r\n            return {\r\n                ...state,\r\n                isRegistered: payload.error.isRegistered\r\n            };\r\n\r\n        case EXISTING_USER:\r\n            console.log(EXISTING_USER, payload);\r\n            return {\r\n                ...state,\r\n                isRegistered: payload.data.isRegistered\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SUCCESS, ERROR, RESET } from \"./../constants\";\n\nconst INITIAL_STATE = {\n    response: null,\n    error: null\n}\n\nexport default (state = INITIAL_STATE, payload) => {\n    switch (payload.type) {\n        case SUCCESS:\n            console.log(payload);\n            return {\n                ...state,\n                response: payload.response\n            };\n\n        case ERROR:\n            return {\n                ...state,\n                error: payload.error\n            };\n\n        case RESET:\n            return {\n                response: null,\n                error: null\n            };\n\n        default:\n            return state;\n    }\n}","import user from \"./user\";\r\nimport notifications from \"./notifications\";\r\nimport {\r\n    combineReducers\r\n} from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n    notifications\r\n});\r\n\r\nexport default rootReducer;","import axios from 'axios';\r\nimport { NEW_USER, EXISTING_USER, GET_USER_DATA, SET_USER_DATA, SUCCESS, ERROR, RESET, LOGOUT, GET_TOKEN } from \"./../constants\";\r\n// const url = \"http://localhost:3000\";\r\nconst url = \"\";\r\n\r\nexport const verify = (data) => (dispatch) => {\r\n    return axios.post(`${url}/auth/verify`, data)\r\n        .then((response) => {\r\n            console.log(response.data);\r\n            dispatch({\r\n                type: EXISTING_USER,\r\n                data: response.data\r\n            });\r\n        }).catch(err => {\r\n            console.error(err.response);\r\n            if(err.response.status === 406){\r\n                dispatch({\r\n                    type: NEW_USER,\r\n                    error: err.response.data\r\n                });\r\n                dispatch(alertError(err.response.data));\r\n                setTimeout(() => dispatch(reset()), 2500);\r\n            }            \r\n        });\r\n}\r\n\r\nexport const login = (data) => (dispatch) => {\r\n    return axios.post(`${url}/auth/login`, data, {withCredentials: true})\r\n        .then((response) => {\r\n            dispatch({\r\n                type: SET_USER_DATA,\r\n                user: response.data\r\n            })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            dispatch(alertError(err.response.data));\r\n            setTimeout(() => dispatch(reset()), 2500);\r\n        });\r\n}\r\n\r\nexport const register = (data) => (dispatch) => {\r\n    return axios.post(`${url}/auth/register`, data)\r\n        .then((response) => {\r\n            console.log(response.data)\r\n            dispatch(alertSuccess(response.data));\r\n            dispatch({\r\n                type: SET_USER_DATA,\r\n                user: response.data\r\n            });\r\n            setTimeout(() => dispatch(reset()), 2500);\r\n        }).catch(err => {\r\n            console.log(err)\r\n            dispatch(alertError(err.response.data));\r\n            setTimeout(() => dispatch(reset()), 2500);\r\n        });\r\n}\r\n\r\nexport const getUserData = () => (dispatch) => {\r\n    return axios.get(`${url}/user/details`, { withCredentials: true })\r\n        .then((response) => {\r\n            dispatch({\r\n                type: GET_USER_DATA,\r\n                user: response.data\r\n            })\r\n        }).catch((error) => {\r\n            console.log(error);\r\n            dispatch({\r\n                type: LOGOUT\r\n            })\r\n        });\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    return axios.get(`${url}/auth/logout`, { withCredentials: true })\r\n        .then((response) => {\r\n            dispatch({\r\n                type: LOGOUT\r\n            })\r\n        });\r\n}\r\n\r\nexport const alertSuccess = (response) => ({\r\n    type: SUCCESS,\r\n    response: response\r\n});\r\n\r\nexport const alertError = (error) => ({\r\n    type: ERROR,\r\n    error: error\r\n});\r\n\r\nexport const reset = () => ({\r\n    type: RESET\r\n});\r\n\r\nexport const getToken = () => ({\r\n    type: GET_TOKEN\r\n});","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as Actions from \"../../actions/actions\";\nimport \"./notification.css\";\n\nclass Notification extends Component {\n\n  render() {\n    if(this.props.notifications.response){\n        return (\n            <div className=\"wrapper success\">\n                {this.props.notifications.response.msg}\n            </div>\n        );\n    }else if(this.props.notifications.error){\n        return (\n            <div className=\"wrapper error\">\n                {this.props.notifications.error.msg}\n            </div>\n        );\n    }else{\n        return null;\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    notifications: state.notifications\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(Actions, dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Notification);\n","import React, {\n  Component\n} from \"react\";\nimport {\n  bindActionCreators\n} from \"redux\";\nimport {\n  connect\n} from \"react-redux\";\nimport * as Actions from \"./actions/actions\";\nimport {\n  Redirect\n} from \"react-router-dom\";\nimport Notification from \"./components/notification/notification\";\n\nclass App extends Component {\n\n  componentWillMount() {\n    this.props.action.getToken();\n  }\n\n  render() {\n    if (!this.props.user.token)\n      return (\n        <div>\n          <Notification />\n          <Redirect to={{pathname: '/login'}} />\n        </div>\n      )\n    else\n      return <Redirect to = {\n        {\n          pathname: '/home'\n        }\n      }\n    /> ;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(Actions, dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as Actions from \"../../actions/actions\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props){\n    super(props);\n    this.props.action.getUserData();\n  }\n\n  logout() {\n    this.props.action.logout();\n    this.props.history.push(\"login\");\n  }\n\n  render() {\n    if (!this.props.user) return <Redirect to={{ pathname: \"/login\" }} />;\n\n    return (\n      <div className=\"container\">\n        <div style={{textAlign: \"center\"}}>\n          <h2>Welcome</h2>\n          <h1>{(this.props.user.user)? this.props.user.user.name : null}</h1>\n          <h5>{(this.props.user.user)? this.props.user.user.email : null}</h5>\n          <button onClick={() => this.logout()} className=\"btn btn-info\">Logout</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(Actions, dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Home);\n","import React, { Component } from \"react\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./login.css\";\r\nimport * as Actions from \"../../actions/actions\";\r\nimport { AUTH_TYPE } from \"./../../constants\";\r\n\r\nclass Login extends Component {  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.emailRe = new RegExp(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\");\r\n    this.passRe = new RegExp(\"[0-9].+\");\r\n\r\n    this.state = {\r\n      username: null,\r\n      name: null,\r\n      email: null,\r\n      mobileNumber: null,\r\n      password: null,\r\n      otp: null,\r\n      rememberMe: false,\r\n      oAuthToken: null\r\n    };\r\n  }\r\n\r\n  onFormSubmit(ev) {\r\n    ev.preventDefault();\r\n    this.setState({\r\n      email: (this.emailRe.test(this.state.username))? this.state.username : this.state.email,\r\n      mobileNumber: (this.passRe.test(this.state.username))? this.state.username : this.state.mobileNumber\r\n    }, () => {\r\n      if ((this.state.email || this.state.mobileNumber) && !(this.state.password || this.state.otp)) {     \r\n        this.props.action.verify(this.state);\r\n      }else{\r\n        \r\n        if(this.state.email && this.state.password && this.state.mobileNumber && this.state.name){\r\n          this.register(this.state);\r\n        }else if ((this.state.email && this.state.password) || (this.state.mobileNumber && this.state.otp)) {\r\n          this.login(this.state, AUTH_TYPE.NORMAL);\r\n        }else{\r\n          this.props.action.alertError({\r\n            msg: \"Please enter valid input!\"\r\n          });\r\n          setTimeout(() => this.props.action.reset(), 2500);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  register(data){\r\n    this.props.action.register(data);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Object} data Login form data\r\n   * @param {String} authType type of authentication [OAuth, Normal]\r\n   */\r\n  login(data, authType){\r\n    this.props.action.login({...data, authType});\r\n  }\r\n\r\n  render() {\r\n    let passOrPin = null;\r\n    if(this.state.username !== null && this.props.user.isRegistered !== null){\r\n      if(this.props.user.isRegistered){\r\n        passOrPin = (this.emailRe.test(this.state.username))? <>\r\n                                                                <input type=\"password\" className=\"input\" placeholder=\"Enter your password\" required\r\n                                                                  onChange={ev => this.setState({ password: ev.target.value })} />\r\n                                                                <div className=\"rememberme\">\r\n                                                                  <input type=\"checkbox\" id=\"rememberme\" name=\"rememberme\" onChange={ev => this.setState({ rememberMe: ev.target.checked })} /> \r\n                                                                  <label htmlFor=\"rememberme\">Remember Me</label>\r\n                                                                </div>\r\n                                                              </>\r\n                                                              : \r\n                                                              <>\r\n                                                                <input type=\"number\" className=\"input\" min=\"000000\" max=\"999999\" placeholder=\"Enter OTP\" required\r\n                                                                onChange={ev => this.setState({ otp: ev.target.value })} />\r\n                                                                <div className=\"rememberme\">\r\n                                                                  <input type=\"checkbox\" id=\"rememberme\" name=\"rememberme\" onChange={ev => this.setState({ rememberMe: ev.target.checked })} /> \r\n                                                                  <label htmlFor=\"rememberme\">Remember Me</label>\r\n                                                                </div>\r\n                                                              </>\r\n      } else {\r\n        passOrPin = (<div>\r\n                        {(this.emailRe.test(this.state.username))? <input type=\"text\" className=\"input\" placeholder=\"Enter mobile number\" required\r\n                                                                    onChange={ev => this.setState({ mobileNumber: ev.target.value })} /> : \r\n                                                                   <input type=\"email\" className=\"input\" placeholder=\"Enter email\" required\r\n                                                                    onChange={ev => this.setState({ email: ev.target.value })} />}\r\n                        <input type=\"password\" className=\"input\" placeholder=\"Enter your password\" required\r\n                          onChange={ev => this.setState({ password: ev.target.value })} /> \r\n                        <input type=\"name\" className=\"input\" placeholder=\"Enter your name\" required\r\n                          onChange={ev => this.setState({ name: ev.target.value })} />\r\n                    </div>);\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"row full\">\r\n              <div className=\"col-sm-12 col-md-8 col-lg-6 box\">                \r\n                <h2>{(this.props.user.isRegistered === null || this.props.user.isRegistered !== false)? \"Login\" : \"Register\"}</h2>\r\n                <div className=\"card\">\r\n                  <div className=\"card-body\">                        \r\n                    <form onSubmit={ev => this.onFormSubmit(ev)}>\r\n                      <input\r\n                          type=\"text\"\r\n                          className=\"input\"\r\n                          placeholder=\"Enter email or mobile number\"\r\n                          required\r\n                          onChange={ev =>\r\n                            this.setState({ username: ev.target.value })\r\n                          }\r\n                        />\r\n\r\n                      {passOrPin}\r\n                        \r\n                      <div className=\"btn-holder\">\r\n                        <button type=\"submit\">\r\n                          >\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    user: state.user\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    action: bindActionCreators(Actions, dispatch)\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Login);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { Provider } from \"react-redux\";\nimport Store from \"./Store\";\n\nimport { Route, HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport Home from \"./components/home/home\";\nimport Login from \"./components/login/login\";\nconst StoreInstance = Store();\n\nconst routing = (\n  <Provider store={StoreInstance}>\n    <HashRouter>\n      <div>\n        <Route path=\"/\" component={App} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/home\" component={Home} />\n        {/* <Route path=\"/quiz/:quiz_id\" component={Quiz} /> */}\n      </div>\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\r\n    createStore,\r\n    applyMiddleware\r\n} from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport default () => {\r\n    return createStore(rootReducer, applyMiddleware(thunk));\r\n}"],"sourceRoot":""}